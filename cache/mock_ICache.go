// Code generated by mockery v2.50.3. DO NOT EDIT.

package cache

import (
	entity "github.com/AmadlaOrg/hery/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockCache is an autogenerated mock type for the ICache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// AddEntity provides a mock function with given fields: _a0
func (_m *MockCache) AddEntity(_a0 *entity.Entity) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddEntity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Entity) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_AddEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEntity'
type MockCache_AddEntity_Call struct {
	*mock.Call
}

// AddEntity is a helper method to define mock.On call
//   - _a0 *entity.Entity
func (_e *MockCache_Expecter) AddEntity(_a0 interface{}) *MockCache_AddEntity_Call {
	return &MockCache_AddEntity_Call{Call: _e.mock.On("AddEntity", _a0)}
}

func (_c *MockCache_AddEntity_Call) Run(run func(_a0 *entity.Entity)) *MockCache_AddEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Entity))
	})
	return _c
}

func (_c *MockCache_AddEntity_Call) Return(_a0 error) *MockCache_AddEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_AddEntity_Call) RunAndReturn(run func(*entity.Entity) error) *MockCache_AddEntity_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockCache) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockCache_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockCache_Expecter) Close() *MockCache_Close_Call {
	return &MockCache_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockCache_Close_Call) Run(run func()) *MockCache_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Close_Call) Return(_a0 error) *MockCache_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_Close_Call) RunAndReturn(run func() error) *MockCache_Close_Call {
	_c.Call.Return(run)
	return _c
}

// InsertInEntity provides a mock function with no fields
func (_m *MockCache) InsertInEntity() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InsertInEntity")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_InsertInEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertInEntity'
type MockCache_InsertInEntity_Call struct {
	*mock.Call
}

// InsertInEntity is a helper method to define mock.On call
func (_e *MockCache_Expecter) InsertInEntity() *MockCache_InsertInEntity_Call {
	return &MockCache_InsertInEntity_Call{Call: _e.mock.On("InsertInEntity")}
}

func (_c *MockCache_InsertInEntity_Call) Run(run func()) *MockCache_InsertInEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_InsertInEntity_Call) Return(_a0 error) *MockCache_InsertInEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_InsertInEntity_Call) RunAndReturn(run func() error) *MockCache_InsertInEntity_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with no fields
func (_m *MockCache) Open() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Open")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type MockCache_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
func (_e *MockCache_Expecter) Open() *MockCache_Open_Call {
	return &MockCache_Open_Call{Call: _e.mock.On("Open")}
}

func (_c *MockCache_Open_Call) Run(run func()) *MockCache_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_Open_Call) Return(_a0 error) *MockCache_Open_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_Open_Call) RunAndReturn(run func() error) *MockCache_Open_Call {
	_c.Call.Return(run)
	return _c
}

// SelectEntity provides a mock function with no fields
func (_m *MockCache) SelectEntity() (*entity.Entity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectEntity")
	}

	var r0 *entity.Entity
	var r1 error
	if rf, ok := ret.Get(0).(func() (*entity.Entity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *entity.Entity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Entity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_SelectEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectEntity'
type MockCache_SelectEntity_Call struct {
	*mock.Call
}

// SelectEntity is a helper method to define mock.On call
func (_e *MockCache_Expecter) SelectEntity() *MockCache_SelectEntity_Call {
	return &MockCache_SelectEntity_Call{Call: _e.mock.On("SelectEntity")}
}

func (_c *MockCache_SelectEntity_Call) Run(run func()) *MockCache_SelectEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_SelectEntity_Call) Return(_a0 *entity.Entity, _a1 error) *MockCache_SelectEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_SelectEntity_Call) RunAndReturn(run func() (*entity.Entity, error)) *MockCache_SelectEntity_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
