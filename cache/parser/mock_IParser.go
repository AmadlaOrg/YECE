// Code generated by mockery v2.47.0. DO NOT EDIT.

package parser

import (
	database "github.com/AmadlaOrg/hery/cache/database"
	entity "github.com/AmadlaOrg/hery/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockCacheParser is an autogenerated mock type for the IParser type
type MockCacheParser struct {
	mock.Mock
}

type MockCacheParser_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheParser) EXPECT() *MockCacheParser_Expecter {
	return &MockCacheParser_Expecter{mock: &_m.Mock}
}

// ParseEntity provides a mock function with given fields: _a0
func (_m *MockCacheParser) ParseEntity(_a0 entity.Entity) (database.Table, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ParseEntity")
	}

	var r0 database.Table
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Entity) (database.Table, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.Entity) database.Table); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(database.Table)
	}

	if rf, ok := ret.Get(1).(func(entity.Entity) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheParser_ParseEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseEntity'
type MockCacheParser_ParseEntity_Call struct {
	*mock.Call
}

// ParseEntity is a helper method to define mock.On call
//   - _a0 entity.Entity
func (_e *MockCacheParser_Expecter) ParseEntity(_a0 interface{}) *MockCacheParser_ParseEntity_Call {
	return &MockCacheParser_ParseEntity_Call{Call: _e.mock.On("ParseEntity", _a0)}
}

func (_c *MockCacheParser_ParseEntity_Call) Run(run func(_a0 entity.Entity)) *MockCacheParser_ParseEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.Entity))
	})
	return _c
}

func (_c *MockCacheParser_ParseEntity_Call) Return(_a0 database.Table, _a1 error) *MockCacheParser_ParseEntity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheParser_ParseEntity_Call) RunAndReturn(run func(entity.Entity) (database.Table, error)) *MockCacheParser_ParseEntity_Call {
	_c.Call.Return(run)
	return _c
}

// ParseMultipleEntities provides a mock function with given fields: entities
func (_m *MockCacheParser) ParseMultipleEntities(entities []entity.Entity) (database.Table, error) {
	ret := _m.Called(entities)

	if len(ret) == 0 {
		panic("no return value specified for ParseMultipleEntities")
	}

	var r0 database.Table
	var r1 error
	if rf, ok := ret.Get(0).(func([]entity.Entity) (database.Table, error)); ok {
		return rf(entities)
	}
	if rf, ok := ret.Get(0).(func([]entity.Entity) database.Table); ok {
		r0 = rf(entities)
	} else {
		r0 = ret.Get(0).(database.Table)
	}

	if rf, ok := ret.Get(1).(func([]entity.Entity) error); ok {
		r1 = rf(entities)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheParser_ParseMultipleEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseMultipleEntities'
type MockCacheParser_ParseMultipleEntities_Call struct {
	*mock.Call
}

// ParseMultipleEntities is a helper method to define mock.On call
//   - entities []entity.Entity
func (_e *MockCacheParser_Expecter) ParseMultipleEntities(entities interface{}) *MockCacheParser_ParseMultipleEntities_Call {
	return &MockCacheParser_ParseMultipleEntities_Call{Call: _e.mock.On("ParseMultipleEntities", entities)}
}

func (_c *MockCacheParser_ParseMultipleEntities_Call) Run(run func(entities []entity.Entity)) *MockCacheParser_ParseMultipleEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]entity.Entity))
	})
	return _c
}

func (_c *MockCacheParser_ParseMultipleEntities_Call) Return(_a0 database.Table, _a1 error) *MockCacheParser_ParseMultipleEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheParser_ParseMultipleEntities_Call) RunAndReturn(run func([]entity.Entity) (database.Table, error)) *MockCacheParser_ParseMultipleEntities_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheParser creates a new instance of MockCacheParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheParser {
	mock := &MockCacheParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
