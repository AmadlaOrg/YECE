// Code generated by mockery v2.50.4. DO NOT EDIT.

package database

import mock "github.com/stretchr/testify/mock"

// MockCacheDatabase is an autogenerated mock type for the IDatabase type
type MockCacheDatabase struct {
	mock.Mock
}

type MockCacheDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheDatabase) EXPECT() *MockCacheDatabase_Expecter {
	return &MockCacheDatabase_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with no fields
func (_m *MockCacheDatabase) Apply() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheDatabase_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockCacheDatabase_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
func (_e *MockCacheDatabase_Expecter) Apply() *MockCacheDatabase_Apply_Call {
	return &MockCacheDatabase_Apply_Call{Call: _e.mock.On("Apply")}
}

func (_c *MockCacheDatabase_Apply_Call) Run(run func()) *MockCacheDatabase_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheDatabase_Apply_Call) Return(_a0 error) *MockCacheDatabase_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheDatabase_Apply_Call) RunAndReturn(run func() error) *MockCacheDatabase_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockCacheDatabase) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheDatabase_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockCacheDatabase_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockCacheDatabase_Expecter) Close() *MockCacheDatabase_Close_Call {
	return &MockCacheDatabase_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockCacheDatabase_Close_Call) Run(run func()) *MockCacheDatabase_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheDatabase_Close_Call) Return(_a0 error) *MockCacheDatabase_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheDatabase_Close_Call) RunAndReturn(run func() error) *MockCacheDatabase_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTable provides a mock function with no fields
func (_m *MockCacheDatabase) CreateTable() {
	_m.Called()
}

// MockCacheDatabase_CreateTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTable'
type MockCacheDatabase_CreateTable_Call struct {
	*mock.Call
}

// CreateTable is a helper method to define mock.On call
func (_e *MockCacheDatabase_Expecter) CreateTable() *MockCacheDatabase_CreateTable_Call {
	return &MockCacheDatabase_CreateTable_Call{Call: _e.mock.On("CreateTable")}
}

func (_c *MockCacheDatabase_CreateTable_Call) Run(run func()) *MockCacheDatabase_CreateTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheDatabase_CreateTable_Call) Return() *MockCacheDatabase_CreateTable_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheDatabase_CreateTable_Call) RunAndReturn(run func()) *MockCacheDatabase_CreateTable_Call {
	_c.Run(run)
	return _c
}

// Delete provides a mock function with given fields: table, clauses, joinClauses
func (_m *MockCacheDatabase) Delete(table Table, clauses SelectClauses, joinClauses []JoinClauses) {
	_m.Called(table, clauses, joinClauses)
}

// MockCacheDatabase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCacheDatabase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - table Table
//   - clauses SelectClauses
//   - joinClauses []JoinClauses
func (_e *MockCacheDatabase_Expecter) Delete(table interface{}, clauses interface{}, joinClauses interface{}) *MockCacheDatabase_Delete_Call {
	return &MockCacheDatabase_Delete_Call{Call: _e.mock.On("Delete", table, clauses, joinClauses)}
}

func (_c *MockCacheDatabase_Delete_Call) Run(run func(table Table, clauses SelectClauses, joinClauses []JoinClauses)) *MockCacheDatabase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Table), args[1].(SelectClauses), args[2].([]JoinClauses))
	})
	return _c
}

func (_c *MockCacheDatabase_Delete_Call) Return() *MockCacheDatabase_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheDatabase_Delete_Call) RunAndReturn(run func(Table, SelectClauses, []JoinClauses)) *MockCacheDatabase_Delete_Call {
	_c.Run(run)
	return _c
}

// DeleteDb provides a mock function with no fields
func (_m *MockCacheDatabase) DeleteDb() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteDb")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheDatabase_DeleteDb_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDb'
type MockCacheDatabase_DeleteDb_Call struct {
	*mock.Call
}

// DeleteDb is a helper method to define mock.On call
func (_e *MockCacheDatabase_Expecter) DeleteDb() *MockCacheDatabase_DeleteDb_Call {
	return &MockCacheDatabase_DeleteDb_Call{Call: _e.mock.On("DeleteDb")}
}

func (_c *MockCacheDatabase_DeleteDb_Call) Run(run func()) *MockCacheDatabase_DeleteDb_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheDatabase_DeleteDb_Call) Return(_a0 error) *MockCacheDatabase_DeleteDb_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheDatabase_DeleteDb_Call) RunAndReturn(run func() error) *MockCacheDatabase_DeleteDb_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with no fields
func (_m *MockCacheDatabase) Initialize() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheDatabase_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type MockCacheDatabase_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
func (_e *MockCacheDatabase_Expecter) Initialize() *MockCacheDatabase_Initialize_Call {
	return &MockCacheDatabase_Initialize_Call{Call: _e.mock.On("Initialize")}
}

func (_c *MockCacheDatabase_Initialize_Call) Run(run func()) *MockCacheDatabase_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheDatabase_Initialize_Call) Return(_a0 error) *MockCacheDatabase_Initialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheDatabase_Initialize_Call) RunAndReturn(run func() error) *MockCacheDatabase_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: table
func (_m *MockCacheDatabase) Insert(table Table) {
	_m.Called(table)
}

// MockCacheDatabase_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockCacheDatabase_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - table Table
func (_e *MockCacheDatabase_Expecter) Insert(table interface{}) *MockCacheDatabase_Insert_Call {
	return &MockCacheDatabase_Insert_Call{Call: _e.mock.On("Insert", table)}
}

func (_c *MockCacheDatabase_Insert_Call) Run(run func(table Table)) *MockCacheDatabase_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Table))
	})
	return _c
}

func (_c *MockCacheDatabase_Insert_Call) Return() *MockCacheDatabase_Insert_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheDatabase_Insert_Call) RunAndReturn(run func(Table)) *MockCacheDatabase_Insert_Call {
	_c.Run(run)
	return _c
}

// IsInitialized provides a mock function with no fields
func (_m *MockCacheDatabase) IsInitialized() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsInitialized")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCacheDatabase_IsInitialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsInitialized'
type MockCacheDatabase_IsInitialized_Call struct {
	*mock.Call
}

// IsInitialized is a helper method to define mock.On call
func (_e *MockCacheDatabase_Expecter) IsInitialized() *MockCacheDatabase_IsInitialized_Call {
	return &MockCacheDatabase_IsInitialized_Call{Call: _e.mock.On("IsInitialized")}
}

func (_c *MockCacheDatabase_IsInitialized_Call) Run(run func()) *MockCacheDatabase_IsInitialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheDatabase_IsInitialized_Call) Return(_a0 bool) *MockCacheDatabase_IsInitialized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheDatabase_IsInitialized_Call) RunAndReturn(run func() bool) *MockCacheDatabase_IsInitialized_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: table, clauses, joinClauses
func (_m *MockCacheDatabase) Select(table Table, clauses SelectClauses, joinClauses []JoinClauses) {
	_m.Called(table, clauses, joinClauses)
}

// MockCacheDatabase_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type MockCacheDatabase_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - table Table
//   - clauses SelectClauses
//   - joinClauses []JoinClauses
func (_e *MockCacheDatabase_Expecter) Select(table interface{}, clauses interface{}, joinClauses interface{}) *MockCacheDatabase_Select_Call {
	return &MockCacheDatabase_Select_Call{Call: _e.mock.On("Select", table, clauses, joinClauses)}
}

func (_c *MockCacheDatabase_Select_Call) Run(run func(table Table, clauses SelectClauses, joinClauses []JoinClauses)) *MockCacheDatabase_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Table), args[1].(SelectClauses), args[2].([]JoinClauses))
	})
	return _c
}

func (_c *MockCacheDatabase_Select_Call) Return() *MockCacheDatabase_Select_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheDatabase_Select_Call) RunAndReturn(run func(Table, SelectClauses, []JoinClauses)) *MockCacheDatabase_Select_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function with given fields: table, where
func (_m *MockCacheDatabase) Update(table Table, where []Condition) {
	_m.Called(table, where)
}

// MockCacheDatabase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCacheDatabase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - table Table
//   - where []Condition
func (_e *MockCacheDatabase_Expecter) Update(table interface{}, where interface{}) *MockCacheDatabase_Update_Call {
	return &MockCacheDatabase_Update_Call{Call: _e.mock.On("Update", table, where)}
}

func (_c *MockCacheDatabase_Update_Call) Run(run func(table Table, where []Condition)) *MockCacheDatabase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Table), args[1].([]Condition))
	})
	return _c
}

func (_c *MockCacheDatabase_Update_Call) Return() *MockCacheDatabase_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheDatabase_Update_Call) RunAndReturn(run func(Table, []Condition)) *MockCacheDatabase_Update_Call {
	_c.Run(run)
	return _c
}

// NewMockCacheDatabase creates a new instance of MockCacheDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheDatabase {
	mock := &MockCacheDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
