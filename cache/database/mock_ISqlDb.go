// Code generated by mockery v2.50.4. DO NOT EDIT.

package database

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockSqlDb is an autogenerated mock type for the ISqlDb type
type MockSqlDb struct {
	mock.Mock
}

type MockSqlDb_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSqlDb) EXPECT() *MockSqlDb_Expecter {
	return &MockSqlDb_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with no fields
func (_m *MockSqlDb) Begin() (*sql.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSqlDb_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockSqlDb_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
func (_e *MockSqlDb_Expecter) Begin() *MockSqlDb_Begin_Call {
	return &MockSqlDb_Begin_Call{Call: _e.mock.On("Begin")}
}

func (_c *MockSqlDb_Begin_Call) Run(run func()) *MockSqlDb_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSqlDb_Begin_Call) Return(_a0 *sql.Tx, _a1 error) *MockSqlDb_Begin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSqlDb_Begin_Call) RunAndReturn(run func() (*sql.Tx, error)) *MockSqlDb_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockSqlDb) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSqlDb_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSqlDb_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSqlDb_Expecter) Close() *MockSqlDb_Close_Call {
	return &MockSqlDb_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSqlDb_Close_Call) Run(run func()) *MockSqlDb_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSqlDb_Close_Call) Return(_a0 error) *MockSqlDb_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSqlDb_Close_Call) RunAndReturn(run func() error) *MockSqlDb_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: query, args
func (_m *MockSqlDb) Exec(query string, args ...any) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...any) (sql.Result, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...any) sql.Result); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...any) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSqlDb_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockSqlDb_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query string
//   - args ...any
func (_e *MockSqlDb_Expecter) Exec(query interface{}, args ...interface{}) *MockSqlDb_Exec_Call {
	return &MockSqlDb_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockSqlDb_Exec_Call) Run(run func(query string, args ...any)) *MockSqlDb_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockSqlDb_Exec_Call) Return(_a0 sql.Result, _a1 error) *MockSqlDb_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSqlDb_Exec_Call) RunAndReturn(run func(string, ...any) (sql.Result, error)) *MockSqlDb_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// SetConnMaxLifetime provides a mock function with given fields: d
func (_m *MockSqlDb) SetConnMaxLifetime(d time.Duration) {
	_m.Called(d)
}

// MockSqlDb_SetConnMaxLifetime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConnMaxLifetime'
type MockSqlDb_SetConnMaxLifetime_Call struct {
	*mock.Call
}

// SetConnMaxLifetime is a helper method to define mock.On call
//   - d time.Duration
func (_e *MockSqlDb_Expecter) SetConnMaxLifetime(d interface{}) *MockSqlDb_SetConnMaxLifetime_Call {
	return &MockSqlDb_SetConnMaxLifetime_Call{Call: _e.mock.On("SetConnMaxLifetime", d)}
}

func (_c *MockSqlDb_SetConnMaxLifetime_Call) Run(run func(d time.Duration)) *MockSqlDb_SetConnMaxLifetime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockSqlDb_SetConnMaxLifetime_Call) Return() *MockSqlDb_SetConnMaxLifetime_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSqlDb_SetConnMaxLifetime_Call) RunAndReturn(run func(time.Duration)) *MockSqlDb_SetConnMaxLifetime_Call {
	_c.Run(run)
	return _c
}

// SetMaxIdleConns provides a mock function with given fields: n
func (_m *MockSqlDb) SetMaxIdleConns(n int) {
	_m.Called(n)
}

// MockSqlDb_SetMaxIdleConns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMaxIdleConns'
type MockSqlDb_SetMaxIdleConns_Call struct {
	*mock.Call
}

// SetMaxIdleConns is a helper method to define mock.On call
//   - n int
func (_e *MockSqlDb_Expecter) SetMaxIdleConns(n interface{}) *MockSqlDb_SetMaxIdleConns_Call {
	return &MockSqlDb_SetMaxIdleConns_Call{Call: _e.mock.On("SetMaxIdleConns", n)}
}

func (_c *MockSqlDb_SetMaxIdleConns_Call) Run(run func(n int)) *MockSqlDb_SetMaxIdleConns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockSqlDb_SetMaxIdleConns_Call) Return() *MockSqlDb_SetMaxIdleConns_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSqlDb_SetMaxIdleConns_Call) RunAndReturn(run func(int)) *MockSqlDb_SetMaxIdleConns_Call {
	_c.Run(run)
	return _c
}

// SetMaxOpenConns provides a mock function with given fields: n
func (_m *MockSqlDb) SetMaxOpenConns(n int) {
	_m.Called(n)
}

// MockSqlDb_SetMaxOpenConns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMaxOpenConns'
type MockSqlDb_SetMaxOpenConns_Call struct {
	*mock.Call
}

// SetMaxOpenConns is a helper method to define mock.On call
//   - n int
func (_e *MockSqlDb_Expecter) SetMaxOpenConns(n interface{}) *MockSqlDb_SetMaxOpenConns_Call {
	return &MockSqlDb_SetMaxOpenConns_Call{Call: _e.mock.On("SetMaxOpenConns", n)}
}

func (_c *MockSqlDb_SetMaxOpenConns_Call) Run(run func(n int)) *MockSqlDb_SetMaxOpenConns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockSqlDb_SetMaxOpenConns_Call) Return() *MockSqlDb_SetMaxOpenConns_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSqlDb_SetMaxOpenConns_Call) RunAndReturn(run func(int)) *MockSqlDb_SetMaxOpenConns_Call {
	_c.Run(run)
	return _c
}

// NewMockSqlDb creates a new instance of MockSqlDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSqlDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSqlDb {
	mock := &MockSqlDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
