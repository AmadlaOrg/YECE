// Code generated by mockery v2.50.4. DO NOT EDIT.

package validation

import mock "github.com/stretchr/testify/mock"

// MockEntityVersionValidation is an autogenerated mock type for the IValidation type
type MockEntityVersionValidation struct {
	mock.Mock
}

type MockEntityVersionValidation_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntityVersionValidation) EXPECT() *MockEntityVersionValidation_Expecter {
	return &MockEntityVersionValidation_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function with given fields: version, versions
func (_m *MockEntityVersionValidation) Exists(version string, versions []string) bool {
	ret := _m.Called(version, versions)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, []string) bool); ok {
		r0 = rf(version, versions)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEntityVersionValidation_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockEntityVersionValidation_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - version string
//   - versions []string
func (_e *MockEntityVersionValidation_Expecter) Exists(version interface{}, versions interface{}) *MockEntityVersionValidation_Exists_Call {
	return &MockEntityVersionValidation_Exists_Call{Call: _e.mock.On("Exists", version, versions)}
}

func (_c *MockEntityVersionValidation_Exists_Call) Run(run func(version string, versions []string)) *MockEntityVersionValidation_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string))
	})
	return _c
}

func (_c *MockEntityVersionValidation_Exists_Call) Return(_a0 bool) *MockEntityVersionValidation_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntityVersionValidation_Exists_Call) RunAndReturn(run func(string, []string) bool) *MockEntityVersionValidation_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Format provides a mock function with given fields: version
func (_m *MockEntityVersionValidation) Format(version string) bool {
	ret := _m.Called(version)

	if len(ret) == 0 {
		panic("no return value specified for Format")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(version)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEntityVersionValidation_Format_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Format'
type MockEntityVersionValidation_Format_Call struct {
	*mock.Call
}

// Format is a helper method to define mock.On call
//   - version string
func (_e *MockEntityVersionValidation_Expecter) Format(version interface{}) *MockEntityVersionValidation_Format_Call {
	return &MockEntityVersionValidation_Format_Call{Call: _e.mock.On("Format", version)}
}

func (_c *MockEntityVersionValidation_Format_Call) Run(run func(version string)) *MockEntityVersionValidation_Format_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEntityVersionValidation_Format_Call) Return(_a0 bool) *MockEntityVersionValidation_Format_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntityVersionValidation_Format_Call) RunAndReturn(run func(string) bool) *MockEntityVersionValidation_Format_Call {
	_c.Call.Return(run)
	return _c
}

// PseudoFormat provides a mock function with given fields: pseudoVersion
func (_m *MockEntityVersionValidation) PseudoFormat(pseudoVersion string) bool {
	ret := _m.Called(pseudoVersion)

	if len(ret) == 0 {
		panic("no return value specified for PseudoFormat")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pseudoVersion)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockEntityVersionValidation_PseudoFormat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PseudoFormat'
type MockEntityVersionValidation_PseudoFormat_Call struct {
	*mock.Call
}

// PseudoFormat is a helper method to define mock.On call
//   - pseudoVersion string
func (_e *MockEntityVersionValidation_Expecter) PseudoFormat(pseudoVersion interface{}) *MockEntityVersionValidation_PseudoFormat_Call {
	return &MockEntityVersionValidation_PseudoFormat_Call{Call: _e.mock.On("PseudoFormat", pseudoVersion)}
}

func (_c *MockEntityVersionValidation_PseudoFormat_Call) Run(run func(pseudoVersion string)) *MockEntityVersionValidation_PseudoFormat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEntityVersionValidation_PseudoFormat_Call) Return(_a0 bool) *MockEntityVersionValidation_PseudoFormat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntityVersionValidation_PseudoFormat_Call) RunAndReturn(run func(string) bool) *MockEntityVersionValidation_PseudoFormat_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEntityVersionValidation creates a new instance of MockEntityVersionValidation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntityVersionValidation(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntityVersionValidation {
	mock := &MockEntityVersionValidation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
