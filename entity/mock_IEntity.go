// Code generated by mockery v2.47.0. DO NOT EDIT.

package entity

import (
	storage "github.com/AmadlaOrg/hery/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockEntity is an autogenerated mock type for the IEntity type
type MockEntity struct {
	mock.Mock
}

type MockEntity_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntity) EXPECT() *MockEntity_Expecter {
	return &MockEntity_Expecter{mock: &_m.Mock}
}

// CheckDuplicate provides a mock function with given fields: entities, entityMeta
func (_m *MockEntity) CheckDuplicate(entities []Entity, entityMeta Entity) error {
	ret := _m.Called(entities, entityMeta)

	if len(ret) == 0 {
		panic("no return value specified for CheckDuplicate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]Entity, Entity) error); ok {
		r0 = rf(entities, entityMeta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEntity_CheckDuplicate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckDuplicate'
type MockEntity_CheckDuplicate_Call struct {
	*mock.Call
}

// CheckDuplicate is a helper method to define mock.On call
//   - entities []Entity
//   - entityMeta Entity
func (_e *MockEntity_Expecter) CheckDuplicate(entities interface{}, entityMeta interface{}) *MockEntity_CheckDuplicate_Call {
	return &MockEntity_CheckDuplicate_Call{Call: _e.mock.On("CheckDuplicate", entities, entityMeta)}
}

func (_c *MockEntity_CheckDuplicate_Call) Run(run func(entities []Entity, entityMeta Entity)) *MockEntity_CheckDuplicate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]Entity), args[1].(Entity))
	})
	return _c
}

func (_c *MockEntity_CheckDuplicate_Call) Return(_a0 error) *MockEntity_CheckDuplicate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntity_CheckDuplicate_Call) RunAndReturn(run func([]Entity, Entity) error) *MockEntity_CheckDuplicate_Call {
	_c.Call.Return(run)
	return _c
}

// CrawlDirectoriesParallel provides a mock function with given fields: root
func (_m *MockEntity) CrawlDirectoriesParallel(root string) (map[string]Entity, error) {
	ret := _m.Called(root)

	if len(ret) == 0 {
		panic("no return value specified for CrawlDirectoriesParallel")
	}

	var r0 map[string]Entity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]Entity, error)); ok {
		return rf(root)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]Entity); ok {
		r0 = rf(root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]Entity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEntity_CrawlDirectoriesParallel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CrawlDirectoriesParallel'
type MockEntity_CrawlDirectoriesParallel_Call struct {
	*mock.Call
}

// CrawlDirectoriesParallel is a helper method to define mock.On call
//   - root string
func (_e *MockEntity_Expecter) CrawlDirectoriesParallel(root interface{}) *MockEntity_CrawlDirectoriesParallel_Call {
	return &MockEntity_CrawlDirectoriesParallel_Call{Call: _e.mock.On("CrawlDirectoriesParallel", root)}
}

func (_c *MockEntity_CrawlDirectoriesParallel_Call) Run(run func(root string)) *MockEntity_CrawlDirectoriesParallel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEntity_CrawlDirectoriesParallel_Call) Return(_a0 map[string]Entity, _a1 error) *MockEntity_CrawlDirectoriesParallel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEntity_CrawlDirectoriesParallel_Call) RunAndReturn(run func(string) (map[string]Entity, error)) *MockEntity_CrawlDirectoriesParallel_Call {
	_c.Call.Return(run)
	return _c
}

// FindDir provides a mock function with given fields: paths, entityVals
func (_m *MockEntity) FindDir(paths storage.AbsPaths, entityVals Entity) (string, error) {
	ret := _m.Called(paths, entityVals)

	if len(ret) == 0 {
		panic("no return value specified for FindDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.AbsPaths, Entity) (string, error)); ok {
		return rf(paths, entityVals)
	}
	if rf, ok := ret.Get(0).(func(storage.AbsPaths, Entity) string); ok {
		r0 = rf(paths, entityVals)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(storage.AbsPaths, Entity) error); ok {
		r1 = rf(paths, entityVals)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEntity_FindDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindDir'
type MockEntity_FindDir_Call struct {
	*mock.Call
}

// FindDir is a helper method to define mock.On call
//   - paths storage.AbsPaths
//   - entityVals Entity
func (_e *MockEntity_Expecter) FindDir(paths interface{}, entityVals interface{}) *MockEntity_FindDir_Call {
	return &MockEntity_FindDir_Call{Call: _e.mock.On("FindDir", paths, entityVals)}
}

func (_c *MockEntity_FindDir_Call) Run(run func(paths storage.AbsPaths, entityVals Entity)) *MockEntity_FindDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(storage.AbsPaths), args[1].(Entity))
	})
	return _c
}

func (_c *MockEntity_FindDir_Call) Return(_a0 string, _a1 error) *MockEntity_FindDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEntity_FindDir_Call) RunAndReturn(run func(storage.AbsPaths, Entity) (string, error)) *MockEntity_FindDir_Call {
	_c.Call.Return(run)
	return _c
}

// GeneratePseudoVersionPattern provides a mock function with given fields: name, version
func (_m *MockEntity) GeneratePseudoVersionPattern(name string, version string) string {
	ret := _m.Called(name, version)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePseudoVersionPattern")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(name, version)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockEntity_GeneratePseudoVersionPattern_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePseudoVersionPattern'
type MockEntity_GeneratePseudoVersionPattern_Call struct {
	*mock.Call
}

// GeneratePseudoVersionPattern is a helper method to define mock.On call
//   - name string
//   - version string
func (_e *MockEntity_Expecter) GeneratePseudoVersionPattern(name interface{}, version interface{}) *MockEntity_GeneratePseudoVersionPattern_Call {
	return &MockEntity_GeneratePseudoVersionPattern_Call{Call: _e.mock.On("GeneratePseudoVersionPattern", name, version)}
}

func (_c *MockEntity_GeneratePseudoVersionPattern_Call) Run(run func(name string, version string)) *MockEntity_GeneratePseudoVersionPattern_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEntity_GeneratePseudoVersionPattern_Call) Return(_a0 string) *MockEntity_GeneratePseudoVersionPattern_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEntity_GeneratePseudoVersionPattern_Call) RunAndReturn(run func(string, string) string) *MockEntity_GeneratePseudoVersionPattern_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: path, collectionName
func (_m *MockEntity) Read(path string, collectionName string) (map[string]any, error) {
	ret := _m.Called(path, collectionName)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 map[string]any
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]any, error)); ok {
		return rf(path, collectionName)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]any); ok {
		r0 = rf(path, collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]any)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(path, collectionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEntity_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockEntity_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - path string
//   - collectionName string
func (_e *MockEntity_Expecter) Read(path interface{}, collectionName interface{}) *MockEntity_Read_Call {
	return &MockEntity_Read_Call{Call: _e.mock.On("Read", path, collectionName)}
}

func (_c *MockEntity_Read_Call) Run(run func(path string, collectionName string)) *MockEntity_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEntity_Read_Call) Return(_a0 map[string]any, _a1 error) *MockEntity_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEntity_Read_Call) RunAndReturn(run func(string, string) (map[string]any, error)) *MockEntity_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEntity creates a new instance of MockEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntity {
	mock := &MockEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
