// Code generated by mockery v2.50.3. DO NOT EDIT.

package collection

import mock "github.com/stretchr/testify/mock"

// MockCollection is an autogenerated mock type for the ICollection type
type MockCollection struct {
	mock.Mock
}

type MockCollection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollection) EXPECT() *MockCollection_Expecter {
	return &MockCollection_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: collectionName
func (_m *MockCollection) Create(collectionName string) error {
	ret := _m.Called(collectionName)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(collectionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollection_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCollection_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - collectionName string
func (_e *MockCollection_Expecter) Create(collectionName interface{}) *MockCollection_Create_Call {
	return &MockCollection_Create_Call{Call: _e.mock.On("Create", collectionName)}
}

func (_c *MockCollection_Create_Call) Run(run func(collectionName string)) *MockCollection_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCollection_Create_Call) Return(_a0 error) *MockCollection_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Create_Call) RunAndReturn(run func(string) error) *MockCollection_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: collectionName
func (_m *MockCollection) Exists(collectionName string) bool {
	ret := _m.Called(collectionName)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(collectionName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockCollection_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockCollection_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - collectionName string
func (_e *MockCollection_Expecter) Exists(collectionName interface{}) *MockCollection_Exists_Call {
	return &MockCollection_Exists_Call{Call: _e.mock.On("Exists", collectionName)}
}

func (_c *MockCollection_Exists_Call) Run(run func(collectionName string)) *MockCollection_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCollection_Exists_Call) Return(_a0 bool) *MockCollection_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Exists_Call) RunAndReturn(run func(string) bool) *MockCollection_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with no fields
func (_m *MockCollection) List() ([][]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 [][]string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([][]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() [][]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCollection_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockCollection_Expecter) List() *MockCollection_List_Call {
	return &MockCollection_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockCollection_List_Call) Run(run func()) *MockCollection_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollection_List_Call) Return(_a0 [][]string, _a1 error) *MockCollection_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_List_Call) RunAndReturn(run func() ([][]string, error)) *MockCollection_List_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: collectionName
func (_m *MockCollection) Remove(collectionName string) error {
	ret := _m.Called(collectionName)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(collectionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollection_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockCollection_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - collectionName string
func (_e *MockCollection_Expecter) Remove(collectionName interface{}) *MockCollection_Remove_Call {
	return &MockCollection_Remove_Call{Call: _e.mock.On("Remove", collectionName)}
}

func (_c *MockCollection_Remove_Call) Run(run func(collectionName string)) *MockCollection_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCollection_Remove_Call) Return(_a0 error) *MockCollection_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Remove_Call) RunAndReturn(run func(string) error) *MockCollection_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: collectionName
func (_m *MockCollection) Select(collectionName string) IEntityCollection {
	ret := _m.Called(collectionName)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 IEntityCollection
	if rf, ok := ret.Get(0).(func(string) IEntityCollection); ok {
		r0 = rf(collectionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(IEntityCollection)
		}
	}

	return r0
}

// MockCollection_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type MockCollection_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - collectionName string
func (_e *MockCollection_Expecter) Select(collectionName interface{}) *MockCollection_Select_Call {
	return &MockCollection_Select_Call{Call: _e.mock.On("Select", collectionName)}
}

func (_c *MockCollection_Select_Call) Run(run func(collectionName string)) *MockCollection_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCollection_Select_Call) Return(_a0 IEntityCollection) *MockCollection_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_Select_Call) RunAndReturn(run func(string) IEntityCollection) *MockCollection_Select_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollection creates a new instance of MockCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollection {
	mock := &MockCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
