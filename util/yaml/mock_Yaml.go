// Code generated by mockery v2.43.2. DO NOT EDIT.

package yaml

import mock "github.com/stretchr/testify/mock"

// MockUtilYaml is an autogenerated mock type for the Yaml type
type MockUtilYaml struct {
	mock.Mock
}

type MockUtilYaml_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUtilYaml) EXPECT() *MockUtilYaml_Expecter {
	return &MockUtilYaml_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: path, fileName
func (_m *MockUtilYaml) Read(path string, fileName string) (map[string]interface{}, error) {
	ret := _m.Called(path, fileName)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string]interface{}, error)); ok {
		return rf(path, fileName)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(path, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(path, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUtilYaml_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockUtilYaml_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - path string
//   - fileName string
func (_e *MockUtilYaml_Expecter) Read(path interface{}, fileName interface{}) *MockUtilYaml_Read_Call {
	return &MockUtilYaml_Read_Call{Call: _e.mock.On("Read", path, fileName)}
}

func (_c *MockUtilYaml_Read_Call) Run(run func(path string, fileName string)) *MockUtilYaml_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockUtilYaml_Read_Call) Return(_a0 map[string]interface{}, _a1 error) *MockUtilYaml_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUtilYaml_Read_Call) RunAndReturn(run func(string, string) (map[string]interface{}, error)) *MockUtilYaml_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUtilYaml creates a new instance of MockUtilYaml. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUtilYaml(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUtilYaml {
	mock := &MockUtilYaml{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
