// Code generated by mockery v2.42.1. DO NOT EDIT.

package git

import mock "github.com/stretchr/testify/mock"

// MockGit is an autogenerated mock type for the RepoManager type
type MockGit struct {
	mock.Mock
}

type MockGit_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGit) EXPECT() *MockGit_Expecter {
	return &MockGit_Expecter{mock: &_m.Mock}
}

// CommitHeadHash provides a mock function with given fields: repoPath
func (_m *MockGit) CommitHeadHash(repoPath string) (string, error) {
	ret := _m.Called(repoPath)

	if len(ret) == 0 {
		panic("no return value specified for CommitHeadHash")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(repoPath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(repoPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(repoPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGit_CommitHeadHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommitHeadHash'
type MockGit_CommitHeadHash_Call struct {
	*mock.Call
}

// CommitHeadHash is a helper method to define mock.On call
//   - repoPath string
func (_e *MockGit_Expecter) CommitHeadHash(repoPath interface{}) *MockGit_CommitHeadHash_Call {
	return &MockGit_CommitHeadHash_Call{Call: _e.mock.On("CommitHeadHash", repoPath)}
}

func (_c *MockGit_CommitHeadHash_Call) Run(run func(repoPath string)) *MockGit_CommitHeadHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGit_CommitHeadHash_Call) Return(_a0 string, _a1 error) *MockGit_CommitHeadHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGit_CommitHeadHash_Call) RunAndReturn(run func(string) (string, error)) *MockGit_CommitHeadHash_Call {
	_c.Call.Return(run)
	return _c
}

// FetchRepo provides a mock function with given fields: url, dest
func (_m *MockGit) FetchRepo(url string, dest string) error {
	ret := _m.Called(url, dest)

	if len(ret) == 0 {
		panic("no return value specified for FetchRepo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(url, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGit_FetchRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchRepo'
type MockGit_FetchRepo_Call struct {
	*mock.Call
}

// FetchRepo is a helper method to define mock.On call
//   - url string
//   - dest string
func (_e *MockGit_Expecter) FetchRepo(url interface{}, dest interface{}) *MockGit_FetchRepo_Call {
	return &MockGit_FetchRepo_Call{Call: _e.mock.On("FetchRepo", url, dest)}
}

func (_c *MockGit_FetchRepo_Call) Run(run func(url string, dest string)) *MockGit_FetchRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockGit_FetchRepo_Call) Return(_a0 error) *MockGit_FetchRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGit_FetchRepo_Call) RunAndReturn(run func(string, string) error) *MockGit_FetchRepo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGit creates a new instance of MockGit. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGit(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGit {
	mock := &MockGit{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
