// Code generated by mockery v2.50.4. DO NOT EDIT.

package file

import (
	io "io"
	os "os"

	mock "github.com/stretchr/testify/mock"

	syscall "syscall"

	time "time"
)

// MockFile is an autogenerated mock type for the IFile type
type MockFile struct {
	mock.Mock
}

type MockFile_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFile) EXPECT() *MockFile_Expecter {
	return &MockFile_Expecter{mock: &_m.Mock}
}

// Chdir provides a mock function with no fields
func (_m *MockFile) Chdir() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Chdir")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFile_Chdir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chdir'
type MockFile_Chdir_Call struct {
	*mock.Call
}

// Chdir is a helper method to define mock.On call
func (_e *MockFile_Expecter) Chdir() *MockFile_Chdir_Call {
	return &MockFile_Chdir_Call{Call: _e.mock.On("Chdir")}
}

func (_c *MockFile_Chdir_Call) Run(run func()) *MockFile_Chdir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Chdir_Call) Return(_a0 error) *MockFile_Chdir_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Chdir_Call) RunAndReturn(run func() error) *MockFile_Chdir_Call {
	_c.Call.Return(run)
	return _c
}

// Chmod provides a mock function with given fields: mode
func (_m *MockFile) Chmod(mode os.FileMode) error {
	ret := _m.Called(mode)

	if len(ret) == 0 {
		panic("no return value specified for Chmod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(os.FileMode) error); ok {
		r0 = rf(mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFile_Chmod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chmod'
type MockFile_Chmod_Call struct {
	*mock.Call
}

// Chmod is a helper method to define mock.On call
//   - mode os.FileMode
func (_e *MockFile_Expecter) Chmod(mode interface{}) *MockFile_Chmod_Call {
	return &MockFile_Chmod_Call{Call: _e.mock.On("Chmod", mode)}
}

func (_c *MockFile_Chmod_Call) Run(run func(mode os.FileMode)) *MockFile_Chmod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(os.FileMode))
	})
	return _c
}

func (_c *MockFile_Chmod_Call) Return(_a0 error) *MockFile_Chmod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Chmod_Call) RunAndReturn(run func(os.FileMode) error) *MockFile_Chmod_Call {
	_c.Call.Return(run)
	return _c
}

// Chown provides a mock function with given fields: uid, gid
func (_m *MockFile) Chown(uid int, gid int) error {
	ret := _m.Called(uid, gid)

	if len(ret) == 0 {
		panic("no return value specified for Chown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(uid, gid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFile_Chown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chown'
type MockFile_Chown_Call struct {
	*mock.Call
}

// Chown is a helper method to define mock.On call
//   - uid int
//   - gid int
func (_e *MockFile_Expecter) Chown(uid interface{}, gid interface{}) *MockFile_Chown_Call {
	return &MockFile_Chown_Call{Call: _e.mock.On("Chown", uid, gid)}
}

func (_c *MockFile_Chown_Call) Run(run func(uid int, gid int)) *MockFile_Chown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockFile_Chown_Call) Return(_a0 error) *MockFile_Chown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Chown_Call) RunAndReturn(run func(int, int) error) *MockFile_Chown_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockFile) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFile_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockFile_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockFile_Expecter) Close() *MockFile_Close_Call {
	return &MockFile_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockFile_Close_Call) Run(run func()) *MockFile_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Close_Call) Return(_a0 error) *MockFile_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Close_Call) RunAndReturn(run func() error) *MockFile_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Fd provides a mock function with no fields
func (_m *MockFile) Fd() uintptr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fd")
	}

	var r0 uintptr
	if rf, ok := ret.Get(0).(func() uintptr); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uintptr)
	}

	return r0
}

// MockFile_Fd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fd'
type MockFile_Fd_Call struct {
	*mock.Call
}

// Fd is a helper method to define mock.On call
func (_e *MockFile_Expecter) Fd() *MockFile_Fd_Call {
	return &MockFile_Fd_Call{Call: _e.mock.On("Fd")}
}

func (_c *MockFile_Fd_Call) Run(run func()) *MockFile_Fd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Fd_Call) Return(_a0 uintptr) *MockFile_Fd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Fd_Call) RunAndReturn(run func() uintptr) *MockFile_Fd_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockFile) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFile_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockFile_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockFile_Expecter) Name() *MockFile_Name_Call {
	return &MockFile_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockFile_Name_Call) Run(run func()) *MockFile_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Name_Call) Return(_a0 string) *MockFile_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Name_Call) RunAndReturn(run func() string) *MockFile_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: b
func (_m *MockFile) Read(b []byte) (int, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockFile_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - b []byte
func (_e *MockFile_Expecter) Read(b interface{}) *MockFile_Read_Call {
	return &MockFile_Read_Call{Call: _e.mock.On("Read", b)}
}

func (_c *MockFile_Read_Call) Run(run func(b []byte)) *MockFile_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockFile_Read_Call) Return(n int, err error) *MockFile_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFile_Read_Call) RunAndReturn(run func([]byte) (int, error)) *MockFile_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAt provides a mock function with given fields: b, off
func (_m *MockFile) ReadAt(b []byte, off int64) (int, error) {
	ret := _m.Called(b, off)

	if len(ret) == 0 {
		panic("no return value specified for ReadAt")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, int64) (int, error)); ok {
		return rf(b, off)
	}
	if rf, ok := ret.Get(0).(func([]byte, int64) int); ok {
		r0 = rf(b, off)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte, int64) error); ok {
		r1 = rf(b, off)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_ReadAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAt'
type MockFile_ReadAt_Call struct {
	*mock.Call
}

// ReadAt is a helper method to define mock.On call
//   - b []byte
//   - off int64
func (_e *MockFile_Expecter) ReadAt(b interface{}, off interface{}) *MockFile_ReadAt_Call {
	return &MockFile_ReadAt_Call{Call: _e.mock.On("ReadAt", b, off)}
}

func (_c *MockFile_ReadAt_Call) Run(run func(b []byte, off int64)) *MockFile_ReadAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(int64))
	})
	return _c
}

func (_c *MockFile_ReadAt_Call) Return(n int, err error) *MockFile_ReadAt_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFile_ReadAt_Call) RunAndReturn(run func([]byte, int64) (int, error)) *MockFile_ReadAt_Call {
	_c.Call.Return(run)
	return _c
}

// ReadDir provides a mock function with given fields: n
func (_m *MockFile) ReadDir(n int) ([]os.DirEntry, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for ReadDir")
	}

	var r0 []os.DirEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]os.DirEntry, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(int) []os.DirEntry); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]os.DirEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_ReadDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadDir'
type MockFile_ReadDir_Call struct {
	*mock.Call
}

// ReadDir is a helper method to define mock.On call
//   - n int
func (_e *MockFile_Expecter) ReadDir(n interface{}) *MockFile_ReadDir_Call {
	return &MockFile_ReadDir_Call{Call: _e.mock.On("ReadDir", n)}
}

func (_c *MockFile_ReadDir_Call) Run(run func(n int)) *MockFile_ReadDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockFile_ReadDir_Call) Return(_a0 []os.DirEntry, _a1 error) *MockFile_ReadDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFile_ReadDir_Call) RunAndReturn(run func(int) ([]os.DirEntry, error)) *MockFile_ReadDir_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFrom provides a mock function with given fields: r
func (_m *MockFile) ReadFrom(r io.Reader) (int64, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReadFrom")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (int64, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) int64); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_ReadFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFrom'
type MockFile_ReadFrom_Call struct {
	*mock.Call
}

// ReadFrom is a helper method to define mock.On call
//   - r io.Reader
func (_e *MockFile_Expecter) ReadFrom(r interface{}) *MockFile_ReadFrom_Call {
	return &MockFile_ReadFrom_Call{Call: _e.mock.On("ReadFrom", r)}
}

func (_c *MockFile_ReadFrom_Call) Run(run func(r io.Reader)) *MockFile_ReadFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader))
	})
	return _c
}

func (_c *MockFile_ReadFrom_Call) Return(n int64, err error) *MockFile_ReadFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFile_ReadFrom_Call) RunAndReturn(run func(io.Reader) (int64, error)) *MockFile_ReadFrom_Call {
	_c.Call.Return(run)
	return _c
}

// Readdirnames provides a mock function with given fields: n
func (_m *MockFile) Readdirnames(n int) ([]string, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Readdirnames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]string, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_Readdirnames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Readdirnames'
type MockFile_Readdirnames_Call struct {
	*mock.Call
}

// Readdirnames is a helper method to define mock.On call
//   - n int
func (_e *MockFile_Expecter) Readdirnames(n interface{}) *MockFile_Readdirnames_Call {
	return &MockFile_Readdirnames_Call{Call: _e.mock.On("Readdirnames", n)}
}

func (_c *MockFile_Readdirnames_Call) Run(run func(n int)) *MockFile_Readdirnames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockFile_Readdirnames_Call) Return(names []string, err error) *MockFile_Readdirnames_Call {
	_c.Call.Return(names, err)
	return _c
}

func (_c *MockFile_Readdirnames_Call) RunAndReturn(run func(int) ([]string, error)) *MockFile_Readdirnames_Call {
	_c.Call.Return(run)
	return _c
}

// Seek provides a mock function with given fields: offset, whence
func (_m *MockFile) Seek(offset int64, whence int) (int64, error) {
	ret := _m.Called(offset, whence)

	if len(ret) == 0 {
		panic("no return value specified for Seek")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int) (int64, error)); ok {
		return rf(offset, whence)
	}
	if rf, ok := ret.Get(0).(func(int64, int) int64); ok {
		r0 = rf(offset, whence)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(offset, whence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_Seek_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seek'
type MockFile_Seek_Call struct {
	*mock.Call
}

// Seek is a helper method to define mock.On call
//   - offset int64
//   - whence int
func (_e *MockFile_Expecter) Seek(offset interface{}, whence interface{}) *MockFile_Seek_Call {
	return &MockFile_Seek_Call{Call: _e.mock.On("Seek", offset, whence)}
}

func (_c *MockFile_Seek_Call) Run(run func(offset int64, whence int)) *MockFile_Seek_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int))
	})
	return _c
}

func (_c *MockFile_Seek_Call) Return(ret int64, err error) *MockFile_Seek_Call {
	_c.Call.Return(ret, err)
	return _c
}

func (_c *MockFile_Seek_Call) RunAndReturn(run func(int64, int) (int64, error)) *MockFile_Seek_Call {
	_c.Call.Return(run)
	return _c
}

// SetDeadline provides a mock function with given fields: t
func (_m *MockFile) SetDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFile_SetDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeadline'
type MockFile_SetDeadline_Call struct {
	*mock.Call
}

// SetDeadline is a helper method to define mock.On call
//   - t time.Time
func (_e *MockFile_Expecter) SetDeadline(t interface{}) *MockFile_SetDeadline_Call {
	return &MockFile_SetDeadline_Call{Call: _e.mock.On("SetDeadline", t)}
}

func (_c *MockFile_SetDeadline_Call) Run(run func(t time.Time)) *MockFile_SetDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockFile_SetDeadline_Call) Return(_a0 error) *MockFile_SetDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_SetDeadline_Call) RunAndReturn(run func(time.Time) error) *MockFile_SetDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetReadDeadline provides a mock function with given fields: t
func (_m *MockFile) SetReadDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetReadDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFile_SetReadDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadDeadline'
type MockFile_SetReadDeadline_Call struct {
	*mock.Call
}

// SetReadDeadline is a helper method to define mock.On call
//   - t time.Time
func (_e *MockFile_Expecter) SetReadDeadline(t interface{}) *MockFile_SetReadDeadline_Call {
	return &MockFile_SetReadDeadline_Call{Call: _e.mock.On("SetReadDeadline", t)}
}

func (_c *MockFile_SetReadDeadline_Call) Run(run func(t time.Time)) *MockFile_SetReadDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockFile_SetReadDeadline_Call) Return(_a0 error) *MockFile_SetReadDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_SetReadDeadline_Call) RunAndReturn(run func(time.Time) error) *MockFile_SetReadDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetWriteDeadline provides a mock function with given fields: t
func (_m *MockFile) SetWriteDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetWriteDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFile_SetWriteDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriteDeadline'
type MockFile_SetWriteDeadline_Call struct {
	*mock.Call
}

// SetWriteDeadline is a helper method to define mock.On call
//   - t time.Time
func (_e *MockFile_Expecter) SetWriteDeadline(t interface{}) *MockFile_SetWriteDeadline_Call {
	return &MockFile_SetWriteDeadline_Call{Call: _e.mock.On("SetWriteDeadline", t)}
}

func (_c *MockFile_SetWriteDeadline_Call) Run(run func(t time.Time)) *MockFile_SetWriteDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockFile_SetWriteDeadline_Call) Return(_a0 error) *MockFile_SetWriteDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_SetWriteDeadline_Call) RunAndReturn(run func(time.Time) error) *MockFile_SetWriteDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with no fields
func (_m *MockFile) Sync() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFile_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockFile_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
func (_e *MockFile_Expecter) Sync() *MockFile_Sync_Call {
	return &MockFile_Sync_Call{Call: _e.mock.On("Sync")}
}

func (_c *MockFile_Sync_Call) Run(run func()) *MockFile_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Sync_Call) Return(_a0 error) *MockFile_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Sync_Call) RunAndReturn(run func() error) *MockFile_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// SyscallConn provides a mock function with no fields
func (_m *MockFile) SyscallConn() (syscall.RawConn, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SyscallConn")
	}

	var r0 syscall.RawConn
	var r1 error
	if rf, ok := ret.Get(0).(func() (syscall.RawConn, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() syscall.RawConn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(syscall.RawConn)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_SyscallConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyscallConn'
type MockFile_SyscallConn_Call struct {
	*mock.Call
}

// SyscallConn is a helper method to define mock.On call
func (_e *MockFile_Expecter) SyscallConn() *MockFile_SyscallConn_Call {
	return &MockFile_SyscallConn_Call{Call: _e.mock.On("SyscallConn")}
}

func (_c *MockFile_SyscallConn_Call) Run(run func()) *MockFile_SyscallConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_SyscallConn_Call) Return(_a0 syscall.RawConn, _a1 error) *MockFile_SyscallConn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFile_SyscallConn_Call) RunAndReturn(run func() (syscall.RawConn, error)) *MockFile_SyscallConn_Call {
	_c.Call.Return(run)
	return _c
}

// Truncate provides a mock function with given fields: size
func (_m *MockFile) Truncate(size int64) error {
	ret := _m.Called(size)

	if len(ret) == 0 {
		panic("no return value specified for Truncate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(size)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFile_Truncate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Truncate'
type MockFile_Truncate_Call struct {
	*mock.Call
}

// Truncate is a helper method to define mock.On call
//   - size int64
func (_e *MockFile_Expecter) Truncate(size interface{}) *MockFile_Truncate_Call {
	return &MockFile_Truncate_Call{Call: _e.mock.On("Truncate", size)}
}

func (_c *MockFile_Truncate_Call) Run(run func(size int64)) *MockFile_Truncate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockFile_Truncate_Call) Return(_a0 error) *MockFile_Truncate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Truncate_Call) RunAndReturn(run func(int64) error) *MockFile_Truncate_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: b
func (_m *MockFile) Write(b []byte) (int, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockFile_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - b []byte
func (_e *MockFile_Expecter) Write(b interface{}) *MockFile_Write_Call {
	return &MockFile_Write_Call{Call: _e.mock.On("Write", b)}
}

func (_c *MockFile_Write_Call) Run(run func(b []byte)) *MockFile_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockFile_Write_Call) Return(n int, err error) *MockFile_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFile_Write_Call) RunAndReturn(run func([]byte) (int, error)) *MockFile_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAt provides a mock function with given fields: b, off
func (_m *MockFile) WriteAt(b []byte, off int64) (int, error) {
	ret := _m.Called(b, off)

	if len(ret) == 0 {
		panic("no return value specified for WriteAt")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, int64) (int, error)); ok {
		return rf(b, off)
	}
	if rf, ok := ret.Get(0).(func([]byte, int64) int); ok {
		r0 = rf(b, off)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte, int64) error); ok {
		r1 = rf(b, off)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_WriteAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAt'
type MockFile_WriteAt_Call struct {
	*mock.Call
}

// WriteAt is a helper method to define mock.On call
//   - b []byte
//   - off int64
func (_e *MockFile_Expecter) WriteAt(b interface{}, off interface{}) *MockFile_WriteAt_Call {
	return &MockFile_WriteAt_Call{Call: _e.mock.On("WriteAt", b, off)}
}

func (_c *MockFile_WriteAt_Call) Run(run func(b []byte, off int64)) *MockFile_WriteAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(int64))
	})
	return _c
}

func (_c *MockFile_WriteAt_Call) Return(n int, err error) *MockFile_WriteAt_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFile_WriteAt_Call) RunAndReturn(run func([]byte, int64) (int, error)) *MockFile_WriteAt_Call {
	_c.Call.Return(run)
	return _c
}

// WriteString provides a mock function with given fields: s
func (_m *MockFile) WriteString(s string) (int, error) {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for WriteString")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_WriteString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteString'
type MockFile_WriteString_Call struct {
	*mock.Call
}

// WriteString is a helper method to define mock.On call
//   - s string
func (_e *MockFile_Expecter) WriteString(s interface{}) *MockFile_WriteString_Call {
	return &MockFile_WriteString_Call{Call: _e.mock.On("WriteString", s)}
}

func (_c *MockFile_WriteString_Call) Run(run func(s string)) *MockFile_WriteString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFile_WriteString_Call) Return(n int, err error) *MockFile_WriteString_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFile_WriteString_Call) RunAndReturn(run func(string) (int, error)) *MockFile_WriteString_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTo provides a mock function with given fields: w
func (_m *MockFile) WriteTo(w io.Writer) (int64, error) {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for WriteTo")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Writer) (int64, error)); ok {
		return rf(w)
	}
	if rf, ok := ret.Get(0).(func(io.Writer) int64); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(io.Writer) error); ok {
		r1 = rf(w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFile_WriteTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTo'
type MockFile_WriteTo_Call struct {
	*mock.Call
}

// WriteTo is a helper method to define mock.On call
//   - w io.Writer
func (_e *MockFile_Expecter) WriteTo(w interface{}) *MockFile_WriteTo_Call {
	return &MockFile_WriteTo_Call{Call: _e.mock.On("WriteTo", w)}
}

func (_c *MockFile_WriteTo_Call) Run(run func(w io.Writer)) *MockFile_WriteTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockFile_WriteTo_Call) Return(n int64, err error) *MockFile_WriteTo_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockFile_WriteTo_Call) RunAndReturn(run func(io.Writer) (int64, error)) *MockFile_WriteTo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFile creates a new instance of MockFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFile {
	mock := &MockFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
